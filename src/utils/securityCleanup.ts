"use client";

/**
 * Utility ƒë·ªÉ cleanup d·ªØ li·ªáu b·∫£o m·∫≠t kh·ªèi localStorage
 * S·ª≠ d·ª•ng khi c·∫ßn x√≥a to√†n b·ªô d·ªØ li·ªáu nh·∫°y c·∫£m
 */
export class SecurityCleanup {
  
  /**
   * X√≥a t·∫•t c·∫£ d·ªØ li·ªáu user/auth kh·ªèi localStorage
   */
  static cleanupUserData() {
    const keysToRemove = [
      'user',
      'token', 
      'authToken',
      'syncedUserIds',
      'user_role_cache_v3', // Old role cache
      'user_role_cache',    // Any role cache variants
      // Pattern ƒë·ªÉ x√≥a t·∫•t c·∫£ userSync_* keys
    ];

    // X√≥a c√°c keys c·ªë ƒë·ªãnh
    keysToRemove.forEach(key => {
      localStorage.removeItem(key);
    });

    // X√≥a t·∫•t c·∫£ keys c√≥ pattern userSync_*
    const allKeys = Object.keys(localStorage);
    allKeys.forEach(key => {
      if (key.startsWith('userSync_') || 
          key.startsWith('user_') ||
          key.includes('clerkId') ||
          key.includes('userId') ||
          key.includes('role_cache')) {
        localStorage.removeItem(key);
      }
    });

    // Also clear sessionStorage role cache
      sessionStorage.removeItem('user_role_session');
    }

   

  /**
   * X√≥a ch·ªâ auth tokens
   */
  static cleanupAuthTokens() {
    const authKeys = ['user', 'token', 'authToken', 'session'];
    authKeys.forEach(key => {
      localStorage.removeItem(key);
    });
  }

  /**
   * Ki·ªÉm tra localStorage c√≥ ch·ª©a d·ªØ li·ªáu nh·∫°y c·∫£m kh√¥ng
   */
  static auditLocalStorage(): { hasUserData: boolean; sensitiveKeys: string[] } {
    const allKeys = Object.keys(localStorage);
    const sensitivePatterns = [
      'user', 'token', 'auth', 'session', 'clerk', 'userId', 'clerkId'
    ];

    const sensitiveKeys = allKeys.filter(key => 
      sensitivePatterns.some(pattern => 
        key.toLowerCase().includes(pattern.toLowerCase())
      )
    );

    return {
      hasUserData: sensitiveKeys.length > 0,
      sensitiveKeys
    };
  }

  /**
   * Ch·∫°y cleanup khi user logout
   */
  static onLogout() {
    this.cleanupUserData();
    
    // Th√™m event ƒë·ªÉ clear cache
    window.dispatchEvent(new CustomEvent('security-cleanup'));
  }

  /**
   * Ch·∫°y ƒë·ªãnh k·ª≥ ƒë·ªÉ cleanup (optional)
   */
  static scheduleCleanup() {
    // Cleanup m·ªói 30 ph√∫t
    setInterval(() => {
      const audit = this.auditLocalStorage();
      if (audit.hasUserData) {
        console.warn('‚ö†Ô∏è Detected user data in localStorage, cleaning up...', audit.sensitiveKeys);
        this.cleanupUserData();
      }
    }, 30 * 60 * 1000);
  }
}

// Auto cleanup khi import
if (typeof window !== 'undefined') {
  // Cleanup ngay khi load
  const audit = SecurityCleanup.auditLocalStorage();
  if (audit.hasUserData) {
    console.warn('üö® Found sensitive data in localStorage on startup:', audit.sensitiveKeys);
    SecurityCleanup.cleanupUserData();
  }
}
