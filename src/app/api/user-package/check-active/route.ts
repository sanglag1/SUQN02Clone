import { NextRequest, NextResponse } from 'next/server';
import { getAuth } from '@clerk/nextjs/server';
import { prisma } from '@/lib/prisma';

// Helper function ƒë·ªÉ x·ª≠ l√Ω fallback to free package
async function handlePackageFallback(userId: string, currentPackage: {
    id: string;
    servicePackage: {
        price: number;
        name: string;
        avatarInterviewLimit: number;
        testQuizEQLimit: number;
        jdUploadLimit: number;
    };
    avatarInterviewUsed: number;
    testQuizEQUsed: number;
    jdUploadUsed: number;
}) {
    // Ki·ªÉm tra xem g√≥i hi·ªán t·∫°i c√≥ ph·∫£i l√† g√≥i tr·∫£ ph√≠ kh√¥ng
    const isPaidPackage = currentPackage.servicePackage.price > 0;
    
    if (!isPaidPackage) {
        return { needsFallback: false };
    }

    // Ki·ªÉm tra xem c√≥ h·∫øt h·∫°n m·ª©c kh√¥ng (avatarInterviewUsed = s·ªë l·∫ßn c√≤n l·∫°i)
    const hasExceededLimits = 
        currentPackage.avatarInterviewUsed <= 0 &&
        currentPackage.testQuizEQUsed <= 0 &&
        currentPackage.jdUploadUsed <= 0;

    if (!hasExceededLimits) {
        return { needsFallback: false };
    }


    // T√¨m g√≥i free
    const freePackage = await prisma.servicePackage.findFirst({
        where: {
            OR: [
                { price: 0 },
                { name: { contains: 'free', mode: 'insensitive' } }
            ],
            isActive: true
        }
    });

    if (!freePackage) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y g√≥i free ƒë·ªÉ fallback');
        return { needsFallback: false };
    }

    // Ki·ªÉm tra xem user ƒë√£ c√≥ g√≥i free ch∆∞a
    let fallbackUserPackage = await prisma.userPackage.findFirst({
        where: {
            userId,
            servicePackageId: freePackage.id,
            isActive: true,
            endDate: { gte: new Date() }
        },
        include: { servicePackage: true }
    });

    // N·∫øu ch∆∞a c√≥ g√≥i free, t·∫°o m·ªõi
    if (!fallbackUserPackage) {
        const endDate = new Date();
        endDate.setFullYear(endDate.getFullYear() + 1); // G√≥i free 1 nƒÉm

        fallbackUserPackage = await prisma.userPackage.create({
            data: {
                userId,
                servicePackageId: freePackage.id,
                startDate: new Date(),
                endDate,
                isActive: true,
                // Set usage counters t∆∞∆°ng ·ª©ng v·ªõi limit c·ªßa ServicePackage
                avatarInterviewUsed: freePackage.avatarInterviewLimit,
                testQuizEQUsed: freePackage.testQuizEQLimit,
                jdUploadUsed: freePackage.jdUploadLimit
            },
            include: { servicePackage: true }
        });

    }

    // Deactivate g√≥i tr·∫£ ph√≠ hi·ªán t·∫°i
    await prisma.userPackage.update({
        where: { id: currentPackage.id },
        data: { isActive: false }
    });

    console.log(`üîÑ Fallback: User ${userId} switched from ${currentPackage.servicePackage.name} to ${freePackage.name}`);

    return {
        needsFallback: true,
        originalPackage: currentPackage,
        fallbackPackage: fallbackUserPackage
    };
}

// Helper function ƒë·ªÉ t√≠nh to√°n usage ƒë∆°n gi·∫£n
function calculateUsage(remaining: number, serviceLimit: number) {
    const actualRemaining = Math.max(0, remaining); // S·ªë l·∫ßn c√≤n l·∫°i (t·ª´ UserPackage)
    const actualUsed = serviceLimit - actualRemaining; // ƒê√£ d√πng = Limit - C√≤n l·∫°i
    
    return {
        actualUsed,
        serviceLimit, // Limit t·ª´ ServicePackage
        remaining: actualRemaining,
        canUse: actualRemaining > 0,
        display: `${actualUsed}/${serviceLimit}`
    };
}

// GET - Check if user has active package
export async function GET(req: NextRequest) {
    try {
        const { userId } = await getAuth(req);
        if (!userId) {
            return NextResponse.json(
                { error: 'Unauthorized' },
                { status: 401 }
            );
        }

        // T√¨m user trong database
        let user = await prisma.user.findUnique({
            where: { id: userId }
        });

        if (!user) {
            // Th·ª≠ t√¨m theo clerkId
            user = await prisma.user.findFirst({
                where: { clerkId: userId }
            });
        }

        if (!user) {
            return NextResponse.json({
                hasActivePackage: false,
                message: 'User not found in database.'
            });
        }

        // T√¨m t·∫•t c·∫£ g√≥i active c√≤n h·∫°n
        const activePackages = await prisma.userPackage.findMany({
            where: {
                userId: user.id,
                isActive: true,
                endDate: { gte: new Date() }
            },
            include: { servicePackage: true },
            orderBy: { createdAt: 'desc' }
        });

        // ∆Øu ti√™n g√≥i tr·∫£ ph√≠ cao nh·∫•t, n·∫øu kh√¥ng c√≥ th√¨ d√πng g√≥i free
        let activePackage = activePackages.find(pkg => pkg.servicePackage.price > 0);
        if (!activePackage) {
            activePackage = activePackages.find(pkg => pkg.servicePackage.price === 0);
        }

        // Logic s·ª≠ d·ª•ng song song: ∆∞u ti√™n g√≥i tr·∫£ ph√≠, fallback v·ªÅ g√≥i free
        const paidPackages = activePackages.filter(pkg => pkg.servicePackage.price > 0);
        const freePackages = activePackages.filter(pkg => pkg.servicePackage.price === 0);
        
        // T√¨m g√≥i tr·∫£ ph√≠ c√≥ l∆∞·ª£t c√≤n l·∫°i (avatarInterviewUsed > 0 = c√≤n l∆∞·ª£t)
        const availablePaidPackage = paidPackages.find(pkg => 
            pkg.avatarInterviewUsed > 0 || pkg.testQuizEQUsed > 0 || pkg.jdUploadUsed > 0
        );
        
        // T√¨m g√≥i free c√≥ l∆∞·ª£t c√≤n l·∫°i (avatarInterviewUsed > 0 = c√≤n l∆∞·ª£t)
        const availableFreePackage = freePackages.find(pkg => 
            pkg.avatarInterviewUsed > 0 || pkg.testQuizEQUsed > 0 || pkg.jdUploadUsed > 0
        );
        
        // Debug log logic ch·ªçn g√≥i
        console.log('Package selection logic:', {
            paidPackages: paidPackages.map(p => ({ name: p.servicePackage.name, ai: p.avatarInterviewUsed })),
            freePackages: freePackages.map(p => ({ name: p.servicePackage.name, ai: p.avatarInterviewUsed })),
            availablePaid: availablePaidPackage?.servicePackage.name,
            availableFree: availableFreePackage?.servicePackage.name
        });

        // ∆Øu ti√™n g√≥i tr·∫£ ph√≠ tr∆∞·ªõc, n·∫øu h·∫øt l∆∞·ª£t th√¨ d√πng g√≥i free
        if (availablePaidPackage) {
            activePackage = availablePaidPackage;
            console.log('Selected paid package:', availablePaidPackage.servicePackage.name);
        } else if (availableFreePackage) {
            activePackage = availableFreePackage;
            console.log('Selected free package:', availableFreePackage.servicePackage.name);
        } else {
            // C·∫£ 2 g√≥i ƒë·ªÅu h·∫øt l∆∞·ª£t, ch·ªçn g√≥i tr·∫£ ph√≠ ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
            activePackage = paidPackages[0] || freePackages[0];
            console.log('Selected exhausted package:', activePackage?.servicePackage.name);
        }



        if (!activePackage) {
            console.log('No active package found for user');
            return NextResponse.json({
                hasActivePackage: false,
                message: 'B·∫°n ch∆∞a c√≥ g√≥i d·ªãch v·ª• ho·∫∑c g√≥i ƒë√£ h·∫øt h·∫°n.'
            });
        }

        // Ki·ªÉm tra v√† x·ª≠ l√Ω fallback
        const fallbackResult = await handlePackageFallback(user.id, activePackage);
        
        if (fallbackResult.needsFallback && fallbackResult.fallbackPackage) {
            // C·∫≠p nh·∫≠t activePackage v·ªõi g√≥i fallback
            activePackage = fallbackResult.fallbackPackage;
        }

        // Debug log tr∆∞·ªõc khi t√≠nh to√°n
        console.log('Raw package data:', {
            avatarInterviewUsed: activePackage.avatarInterviewUsed,
            avatarInterviewLimit: activePackage.servicePackage.avatarInterviewLimit,
            packageName: activePackage.servicePackage.name
        });

        // T√≠nh to√°n usage v·ªõi credit system
        const avatarInterview = calculateUsage(
            activePackage.avatarInterviewUsed, 
            activePackage.servicePackage.avatarInterviewLimit
        );
        const testQuizEQ = calculateUsage(
            activePackage.testQuizEQUsed, 
            activePackage.servicePackage.testQuizEQLimit
        );
        const jdUpload = calculateUsage(
            activePackage.jdUploadUsed, 
            activePackage.servicePackage.jdUploadLimit
        );

        // Debug log k·∫øt qu·∫£ t√≠nh to√°n
        console.log('Calculated usage:', {
            avatarInterview: {
                remaining: avatarInterview.remaining,
                canUse: avatarInterview.canUse,
                display: avatarInterview.display
            }
        });

        // Ki·ªÉm tra th·ªùi gian
        const isTimeValid = activePackage.endDate > new Date();
        const daysRemaining = Math.ceil(
            (new Date(activePackage.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)
        );

        // T√≠nh to√°n t·ªïng usage t·ª´ c·∫£ 2 g√≥i
        const totalUsage = {
            avatarInterview: {
                currentUsage: avatarInterview.actualUsed,
                serviceLimit: avatarInterview.serviceLimit,
                remaining: avatarInterview.remaining,
                canUse: isTimeValid && avatarInterview.canUse,
                display: avatarInterview.display
            },
            testQuizEQ: {
                currentUsage: testQuizEQ.actualUsed,
                serviceLimit: testQuizEQ.serviceLimit,
                remaining: testQuizEQ.remaining,
                canUse: isTimeValid && testQuizEQ.canUse,
                display: testQuizEQ.display
            },
            jdUpload: {
                currentUsage: jdUpload.actualUsed,
                serviceLimit: jdUpload.serviceLimit,
                remaining: jdUpload.remaining,
                canUse: isTimeValid && jdUpload.canUse,
                display: jdUpload.display
            }
        };

        // Debug log ƒë·∫ßy ƒë·ªß
        console.log('Calculated usage:', totalUsage);
        console.log('Package check response:', {
            hasActivePackage: isTimeValid && (avatarInterview.canUse || testQuizEQ.canUse || jdUpload.canUse),
            selectedPackage: activePackage.servicePackage.name,
            avatarInterviewCanUse: avatarInterview.canUse,
            avatarInterviewUsage: `${avatarInterview.actualUsed}/${avatarInterview.serviceLimit}`,
            testQuizEQCanUse: testQuizEQ.canUse,
            testQuizEQUsage: `${testQuizEQ.actualUsed}/${testQuizEQ.serviceLimit}`,
            timeValid: isTimeValid
        });

        // Tr·∫£ v·ªÅ th√¥ng tin c·∫£ 2 g√≥i
        return NextResponse.json({
            hasActivePackage: isTimeValid && (avatarInterview.canUse || testQuizEQ.canUse || jdUpload.canUse),
            selectedPackage: {
                id: activePackage.id,
                name: activePackage.servicePackage.name,
                price: activePackage.servicePackage.price,
                startDate: activePackage.startDate,
                endDate: activePackage.endDate,
                type: activePackage.servicePackage.price > 0 ? 'PAID' : 'FREE'
            },
            allPackages: activePackages.map(pkg => ({
                id: pkg.id,
                name: pkg.servicePackage.name,
                price: pkg.servicePackage.price,
                type: pkg.servicePackage.price > 0 ? 'PAID' : 'FREE',
                avatarInterviewUsed: pkg.avatarInterviewUsed,
                testQuizEQUsed: pkg.testQuizEQUsed,
                jdUploadUsed: pkg.jdUploadUsed,
                isActive: pkg.isActive,
                endDate: pkg.endDate
            })),
            usage: totalUsage,
            fallback: {
                isFallback: fallbackResult.needsFallback,
                originalPackage: fallbackResult.originalPackage,
                fallbackPackage: fallbackResult.fallbackPackage
            },
            timeInfo: {
                endDate: activePackage.endDate,
                daysRemaining: Math.max(0, daysRemaining),
                isTimeValid
            }
        });
    } catch (error) {
        console.error('Error checking active package:', error);
        return NextResponse.json(
            { 
                error: 'Failed to check active package',
                details: error instanceof Error ? error.message : 'Unknown error'
            },
            { status: 500 }
        );
    }
} 