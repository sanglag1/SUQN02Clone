const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

// Convert seed answers into array format expected by UI
function toAnswerArray(questionData) {
  const raw = questionData.answers;
  const correctKey = questionData.correctAnswer || questionData.correct || questionData._correct;
  if (Array.isArray(raw)) return raw;
  if (raw && typeof raw === 'object') {
    return Object.entries(raw)
      .filter(([k, v]) => typeof v === 'string')
      .map(([k, v]) => ({
        content: v,
        isCorrect: typeof correctKey === 'string' && k.toUpperCase() === String(correctKey).toUpperCase()
      }));
  }
  return [];
}

async function main() {
  console.log('üå± Seeding roles...')

  // T·∫°o role user tr∆∞·ªõc
  await prisma.role.upsert({
    where: { id: 'user_role_id' },
    update: {},
    create: {
      id: 'user_role_id',
      name: 'user',
      displayName: 'User',
      description: 'Standard user role',
      isDefault: true,
      isActive: true
    }
  })

  // T·∫°o role admin
  await prisma.role.upsert({
    where: { id: 'admin_role_id' },
    update: {},
    create: {
      id: 'admin_role_id',
      name: 'admin',
      displayName: 'Administrator',
      description: 'Administrator with full access',
      isDefault: false,
      isActive: true
    }
  })

  console.log('‚úÖ Roles seeded successfully!')

  console.log('üå± Seeding service packages...')

  // T·∫°o g√≥i Free
  await prisma.servicePackage.upsert({
    where: { id: 'free_package_id' },
    update: {},
    create: {
      id: 'free_package_id',
      name: 'G√≥i Free',
      price: 0,
      duration: 365, // 1 nƒÉm
      avatarInterviewLimit: 3,
      testQuizEQLimit: 10,
      jdUploadLimit: 2,
      description: 'G√≥i mi·ªÖn ph√≠ v·ªõi c√°c t√≠nh nƒÉng c∆° b·∫£n',
      highlight: false,
      isActive: true
    }
  })

  // T·∫°o g√≥i Basic
  await prisma.servicePackage.upsert({
    where: { id: 'basic_package_id' },
    update: {},
    create: {
      id: 'basic_package_id',
      name: 'G√≥i Basic',
      price: 299000,
      duration: 30,
      avatarInterviewLimit: 10,
      testQuizEQLimit: 50,
      jdUploadLimit: 10,
      description: 'G√≥i c∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
      highlight: false,
      isActive: true
    }
  })

  // T·∫°o g√≥i Pro
  await prisma.servicePackage.upsert({
    where: { id: 'pro_package_id' },
    update: {},
    create: {
      id: 'pro_package_id',
      name: 'G√≥i Pro',
      price: 599000,
      duration: 30,
      avatarInterviewLimit: 30,
      testQuizEQLimit: 150,
      jdUploadLimit: 30,
      description: 'G√≥i chuy√™n nghi·ªáp cho ng∆∞·ªùi c√≥ kinh nghi·ªám',
      highlight: true,
      isActive: true
    }
  })

  // T·∫°o g√≥i Enterprise
  await prisma.servicePackage.upsert({
    where: { id: 'enterprise_package_id' },
    update: {},
    create: {
      id: 'enterprise_package_id',
      name: 'G√≥i Enterprise',
      price: 999000,
      duration: 30,
      avatarInterviewLimit: 100,
      testQuizEQLimit: 500,
      jdUploadLimit: 100,
      description: 'G√≥i doanh nghi·ªáp v·ªõi t√≠nh nƒÉng cao c·∫•p',
      highlight: false,
      isActive: true
    }
  })

  console.log('‚úÖ Service packages seeded successfully!')

  console.log('üå± Seeding job categories...')

  // T·∫°o job categories cho IT
  const frontendCategory = await prisma.jobCategory.upsert({
    where: { id: 'frontend_category_id' },
    update: {},
    create: {
      id: 'frontend_category_id',
      name: 'Frontend Development',
      skills: ['HTML', 'CSS', 'JavaScript', 'React', 'Vue.js', 'Angular', 'TypeScript', 'SASS', 'Webpack', 'Vite']
    }
  })

  const backendCategory = await prisma.jobCategory.upsert({
    where: { id: 'backend_category_id' },
    update: {},
    create: {
      id: 'backend_category_id',
      name: 'Backend Development',
      skills: ['Node.js', 'Python', 'Java', 'C#', '.NET', 'PHP', 'Go', 'Rust', 'Database', 'API Design', 'Microservices']
    }
  })

  const fullstackCategory = await prisma.jobCategory.upsert({
    where: { id: 'fullstack_category_id' },
    update: {},
    create: {
      id: 'fullstack_category_id',
      name: 'Full Stack Development',
      skills: ['Frontend', 'Backend', 'Database', 'DevOps', 'API Design', 'System Design', 'Cloud Services']
    }
  })

  const mobileCategory = await prisma.jobCategory.upsert({
    where: { id: 'mobile_category_id' },
    update: {},
    create: {
      id: 'mobile_category_id',
      name: 'Mobile Development',
      skills: ['React Native', 'Flutter', 'iOS', 'Android', 'Swift', 'Kotlin', 'Mobile UI/UX', 'App Store']
    }
  })

  const devopsCategory = await prisma.jobCategory.upsert({
    where: { id: 'devops_category_id' },
    update: {},
    create: {
      id: 'devops_category_id',
      name: 'DevOps & Cloud',
      skills: ['Docker', 'Kubernetes', 'AWS', 'Azure', 'GCP', 'CI/CD', 'Terraform', 'Monitoring', 'Linux']
    }
  })

  const dataCategory = await prisma.jobCategory.upsert({
    where: { id: 'data_category_id' },
    update: {},
    create: {
      id: 'data_category_id',
      name: 'Data & AI',
      skills: ['Python', 'SQL', 'Machine Learning', 'Data Analysis', 'TensorFlow', 'PyTorch', 'Big Data', 'Statistics']
    }
  })

  console.log('‚úÖ Job categories seeded successfully!')

  console.log('üå± Seeding job specializations...')

  // T·∫°o specializations
  const reactSpecialization = await prisma.jobSpecialization.upsert({
    where: { id: 'react_specialization_id' },
    update: {},
    create: {
      id: 'react_specialization_id',
      name: 'React Development',
      categoryId: frontendCategory.id
    }
  })

  const nodeSpecialization = await prisma.jobSpecialization.upsert({
    where: { id: 'node_specialization_id' },
    update: {},
    create: {
      id: 'node_specialization_id',
      name: 'Node.js Development',
      categoryId: backendCategory.id
    }
  })

  const pythonSpecialization = await prisma.jobSpecialization.upsert({
    where: { id: 'python_specialization_id' },
    update: {},
    create: {
      id: 'python_specialization_id',
      name: 'Python Development',
      categoryId: backendCategory.id
    }
  })

  console.log('‚úÖ Job specializations seeded successfully!')

  console.log('üå± Seeding job roles...')

  // Frontend Roles
  await prisma.jobRole.upsert({
    where: { id: 'frontend_junior_id' },
    update: {},
    create: {
      id: 'frontend_junior_id',
      key: 'frontend-junior',
      title: 'Frontend Developer (Junior)',
      level: 'Junior',
      description: 'Ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng v·ªõi HTML, CSS, JavaScript c∆° b·∫£n',
      minExperience: 0,
      maxExperience: 2,
      order: 1,
      categoryId: frontendCategory.id,
      specializationId: reactSpecialization.id
    }
  })

  await prisma.jobRole.upsert({
    where: { id: 'frontend_mid_id' },
    update: {},
    create: {
      id: 'frontend_mid_id',
      key: 'frontend-mid',
      title: 'Frontend Developer (Mid-level)',
      level: 'Mid',
      description: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng web v·ªõi React, Vue.js v√† c√°c framework hi·ªán ƒë·∫°i',
      minExperience: 2,
      maxExperience: 5,
      order: 2,
      categoryId: frontendCategory.id,
      specializationId: reactSpecialization.id
    }
  })

  await prisma.jobRole.upsert({
    where: { id: 'frontend_senior_id' },
    update: {},
    create: {
      id: 'frontend_senior_id',
      key: 'frontend-senior',
      title: 'Senior Frontend Developer',
      level: 'Senior',
      description: 'L√£nh ƒë·∫°o ph√°t tri·ªÉn frontend, t·ªëi ∆∞u hi·ªáu su·∫•t v√† ki·∫øn tr√∫c',
      minExperience: 5,
      maxExperience: null,
      order: 3,
      categoryId: frontendCategory.id,
      specializationId: reactSpecialization.id
    }
  })

  // Backend Roles
  await prisma.jobRole.upsert({
    where: { id: 'backend_junior_id' },
    update: {},
    create: {
      id: 'backend_junior_id',
      key: 'backend-junior',
      title: 'Backend Developer (Junior)',
      level: 'Junior',
      description: 'Ph√°t tri·ªÉn API v√† logic backend c∆° b·∫£n',
      minExperience: 0,
      maxExperience: 2,
      order: 4,
      categoryId: backendCategory.id,
      specializationId: nodeSpecialization.id
    }
  })

  await prisma.jobRole.upsert({
    where: { id: 'backend_mid_id' },
    update: {},
    create: {
      id: 'backend_mid_id',
      key: 'backend-mid',
      title: 'Backend Developer (Mid-level)',
      level: 'Mid',
      description: 'Ph√°t tri·ªÉn h·ªá th·ªëng backend v·ªõi Node.js, Python v√† database',
      minExperience: 2,
      maxExperience: 5,
      order: 5,
      categoryId: backendCategory.id,
      specializationId: nodeSpecialization.id
    }
  })

  await prisma.jobRole.upsert({
    where: { id: 'backend_senior_id' },
    update: {},
    create: {
      id: 'backend_senior_id',
      key: 'backend-senior',
      title: 'Senior Backend Developer',
      level: 'Senior',
      description: 'Thi·∫øt k·∫ø ki·∫øn tr√∫c h·ªá th·ªëng, microservices v√† t·ªëi ∆∞u hi·ªáu su·∫•t',
      minExperience: 5,
      maxExperience: null,
      order: 6,
      categoryId: backendCategory.id,
      specializationId: nodeSpecialization.id
    }
  })

  // Full Stack Roles
  await prisma.jobRole.upsert({
    where: { id: 'fullstack_junior_id' },
    update: {},
    create: {
      id: 'fullstack_junior_id',
      key: 'fullstack-junior',
      title: 'Full Stack Developer (Junior)',
      level: 'Junior',
      description: 'Ph√°t tri·ªÉn c·∫£ frontend v√† backend v·ªõi ki·∫øn th·ª©c c∆° b·∫£n',
      minExperience: 0,
      maxExperience: 2,
      order: 7,
      categoryId: fullstackCategory.id
    }
  })

  await prisma.jobRole.upsert({
    where: { id: 'fullstack_mid_id' },
    update: {},
    create: {
      id: 'fullstack_mid_id',
      key: 'fullstack-mid',
      title: 'Full Stack Developer (Mid-level)',
      level: 'Mid',
      description: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng ho√†n ch·ªânh v·ªõi frontend v√† backend',
      minExperience: 2,
      maxExperience: 5,
      order: 8,
      categoryId: fullstackCategory.id
    }
  })

  await prisma.jobRole.upsert({
    where: { id: 'fullstack_senior_id' },
    update: {},
    create: {
      id: 'fullstack_senior_id',
      key: 'fullstack-senior',
      title: 'Senior Full Stack Developer',
      level: 'Senior',
      description: 'L√£nh ƒë·∫°o ph√°t tri·ªÉn to√†n b·ªô h·ªá th·ªëng v√† ki·∫øn tr√∫c',
      minExperience: 5,
      maxExperience: null,
      order: 9,
      categoryId: fullstackCategory.id
    }
  })

  // Mobile Roles
  await prisma.jobRole.upsert({
    where: { id: 'mobile_junior_id' },
    update: {},
    create: {
      id: 'mobile_junior_id',
      key: 'mobile-junior',
      title: 'Mobile Developer (Junior)',
      level: 'Junior',
      description: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng mobile v·ªõi React Native ho·∫∑c Flutter',
      minExperience: 0,
      maxExperience: 2,
      order: 10,
      categoryId: mobileCategory.id
    }
  })

  await prisma.jobRole.upsert({
    where: { id: 'mobile_mid_id' },
    update: {},
    create: {
      id: 'mobile_mid_id',
      key: 'mobile-mid',
      title: 'Mobile Developer (Mid-level)',
      level: 'Mid',
      description: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng mobile n√¢ng cao v·ªõi native v√† cross-platform',
      minExperience: 2,
      maxExperience: 5,
      order: 11,
      categoryId: mobileCategory.id
    }
  })

  // DevOps Roles
  await prisma.jobRole.upsert({
    where: { id: 'devops_mid_id' },
    update: {},
    create: {
      id: 'devops_mid_id',
      key: 'devops-mid',
      title: 'DevOps Engineer (Mid-level)',
      level: 'Mid',
      description: 'Qu·∫£n l√Ω infrastructure, CI/CD v√† cloud services',
      minExperience: 2,
      maxExperience: 5,
      order: 12,
      categoryId: devopsCategory.id
    }
  })

  await prisma.jobRole.upsert({
    where: { id: 'devops_senior_id' },
    update: {},
    create: {
      id: 'devops_senior_id',
      key: 'devops-senior',
      title: 'Senior DevOps Engineer',
      level: 'Senior',
      description: 'Thi·∫øt k·∫ø ki·∫øn tr√∫c cloud, automation v√† monitoring',
      minExperience: 5,
      maxExperience: null,
      order: 13,
      categoryId: devopsCategory.id
    }
  })

  // Data Roles
  await prisma.jobRole.upsert({
    where: { id: 'data_mid_id' },
    update: {},
    create: {
      id: 'data_mid_id',
      key: 'data-mid',
      title: 'Data Engineer (Mid-level)',
      level: 'Mid',
      description: 'X·ª≠ l√Ω d·ªØ li·ªáu, ETL v√† data pipeline',
      minExperience: 2,
      maxExperience: 5,
      order: 14,
      categoryId: dataCategory.id
    }
  })

  console.log('‚úÖ Job roles seeded successfully!')

  console.log('üå± Seeding questions...')

  // Frontend Questions
  const frontendQuestions = [
    {
      question: "Gi·∫£i th√≠ch s·ª± kh√°c bi·ªát gi·ªØa let, const v√† var trong JavaScript?",
      answers: {
        A: "let v√† const c√≥ block scope, var c√≥ function scope",
        B: "T·∫•t c·∫£ ƒë·ªÅu c√≥ function scope",
        C: "let v√† var c√≥ block scope, const c√≥ function scope",
        D: "Kh√¥ng c√≥ s·ª± kh√°c bi·ªát"
      },
      correctAnswer: "A",
      fields: ["Frontend Development"],
      topics: ["JavaScript", "ES6"],
      levels: ["junior", "middle"],
      explanation: "let v√† const ƒë∆∞·ª£c gi·ªõi thi·ªáu trong ES6 v√† c√≥ block scope, trong khi var c√≥ function scope. const kh√¥ng th·ªÉ reassign, let c√≥ th·ªÉ reassign."
    },
    {
      question: "React hooks n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ qu·∫£n l√Ω state trong functional component?",
      answers: {
        A: "useState",
        B: "useEffect", 
        C: "useContext",
        D: "useReducer"
      },
      correctAnswer: "A",
      fields: ["Frontend Development"],
      topics: ["React", "Hooks"],
      levels: ["junior", "middle"],
      explanation: "useState l√† hook c∆° b·∫£n nh·∫•t ƒë·ªÉ qu·∫£n l√Ω state trong functional component. useEffect d√πng cho side effects, useContext cho context, useReducer cho complex state."
    },
    {
      question: "Virtual DOM trong React ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
      answers: {
        A: "L√† b·∫£n sao c·ªßa real DOM trong memory",
        B: "L√† real DOM ƒë∆∞·ª£c t·ªëi ∆∞u",
        C: "L√† database c·ªßa React",
        D: "L√† cache c·ªßa browser"
      },
      correctAnswer: "A",
      fields: ["Frontend Development"],
      topics: ["React", "Virtual DOM"],
      levels: ["middle", "senior"],
      explanation: "Virtual DOM l√† b·∫£n sao c·ªßa real DOM ƒë∆∞·ª£c l∆∞u trong memory. React so s√°nh Virtual DOM v·ªõi real DOM ƒë·ªÉ t·ªëi ∆∞u vi·ªác update UI."
    },
    {
      question: "CSS Grid v√† Flexbox kh√°c nhau nh∆∞ th·∫ø n√†o?",
      answers: {
        A: "Grid cho layout 2D, Flexbox cho layout 1D",
        B: "Grid cho layout 1D, Flexbox cho layout 2D", 
        C: "C·∫£ hai ƒë·ªÅu cho layout 2D",
        D: "C·∫£ hai ƒë·ªÅu cho layout 1D"
      },
      correctAnswer: "A",
      fields: ["Frontend Development"],
      topics: ["CSS", "Layout"],
      levels: ["junior", "middle"],
      explanation: "CSS Grid ƒë∆∞·ª£c thi·∫øt k·∫ø cho layout 2 chi·ªÅu (rows v√† columns), trong khi Flexbox ƒë∆∞·ª£c thi·∫øt k·∫ø cho layout 1 chi·ªÅu (row ho·∫∑c column)."
    }
  ]

  // Backend Questions
  const backendQuestions = [
    {
      question: "RESTful API l√† g√¨ v√† c√°c nguy√™n t·∫Øc c∆° b·∫£n?",
      answers: {
        A: "API tu√¢n theo c√°c nguy√™n t·∫Øc REST",
        B: "API ch·ªâ d√πng GET v√† POST",
        C: "API ch·ªâ d√πng JSON",
        D: "API ch·ªâ d√πng HTTP"
      },
      correctAnswer: "A",
      fields: ["Backend Development"],
      topics: ["API Design", "REST"],
      levels: ["junior", "middle"],
      explanation: "RESTful API tu√¢n theo c√°c nguy√™n t·∫Øc REST: stateless, client-server, cacheable, uniform interface, layered system."
    },
    {
      question: "Middleware trong Express.js c√≥ t√°c d·ª•ng g√¨?",
      answers: {
        A: "X·ª≠ l√Ω request tr∆∞·ªõc khi ƒë·∫øn route handler",
        B: "Ch·ªâ x·ª≠ l√Ω response",
        C: "Ch·ªâ x·ª≠ l√Ω database",
        D: "Ch·ªâ x·ª≠ l√Ω authentication"
      },
      correctAnswer: "A",
      fields: ["Backend Development"],
      topics: ["Node.js", "Express.js"],
      levels: ["junior", "middle"],
      explanation: "Middleware trong Express.js l√† c√°c function ƒë∆∞·ª£c th·ª±c thi theo th·ª© t·ª±, c√≥ th·ªÉ x·ª≠ l√Ω request, response, ho·∫∑c chuy·ªÉn ti·∫øp ƒë·∫øn middleware ti·∫øp theo."
    },
    {
      question: "Database indexing c√≥ t√°c d·ª•ng g√¨?",
      answers: {
        A: "TƒÉng t·ªëc ƒë·ªô truy v·∫•n d·ªØ li·ªáu",
        B: "Gi·∫£m dung l∆∞·ª£ng database",
        C: "TƒÉng b·∫£o m·∫≠t",
        D: "Gi·∫£m backup time"
      },
      correctAnswer: "A",
      fields: ["Backend Development"],
      topics: ["Database", "Performance"],
      levels: ["middle", "senior"],
      explanation: "Database indexing t·∫°o ra c·∫•u tr√∫c d·ªØ li·ªáu ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô truy v·∫•n, gi·∫£m th·ªùi gian t√¨m ki·∫øm t·ª´ O(n) xu·ªëng O(log n)."
    }
  ]

  // Full Stack Questions
  const fullstackQuestions = [
    {
      question: "Microservices architecture c√≥ ∆∞u ƒëi·ªÉm g√¨ so v·ªõi monolithic?",
      answers: {
        A: "D·ªÖ scale, deploy ƒë·ªôc l·∫≠p, fault isolation",
        B: "ƒê∆°n gi·∫£n h∆°n monolithic",
        C: "√çt ph·ª©c t·∫°p h∆°n",
        D: "R·∫ª h∆°n ƒë·ªÉ ph√°t tri·ªÉn"
      },
      correctAnswer: "A",
      fields: ["Full Stack Development"],
      topics: ["Architecture", "Microservices"],
      levels: ["middle", "senior"],
      explanation: "Microservices cho ph√©p scale t·ª´ng service ƒë·ªôc l·∫≠p, deploy ri√™ng bi·ªát, v√† khi m·ªôt service l·ªói kh√¥ng ·∫£nh h∆∞·ªüng to√†n b·ªô h·ªá th·ªëng."
    },
    {
      question: "JWT token ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?",
      answers: {
        A: "X√°c th·ª±c v√† ph√¢n quy·ªÅn ng∆∞·ªùi d√πng",
        B: "Ch·ªâ m√£ h√≥a d·ªØ li·ªáu",
        C: "Ch·ªâ n√©n d·ªØ li·ªáu",
        D: "Ch·ªâ cache d·ªØ li·ªáu"
      },
      correctAnswer: "A",
      fields: ["Full Stack Development"],
      topics: ["Authentication", "Security"],
      levels: ["middle", "senior"],
      explanation: "JWT (JSON Web Token) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√°c th·ª±c v√† ph√¢n quy·ªÅn ng∆∞·ªùi d√πng, ch·ª©a th√¥ng tin ƒë∆∞·ª£c m√£ h√≥a v√† c√≥ th·ªÉ verify."
    }
  ]

  // Mobile Questions
  const mobileQuestions = [
    {
      question: "React Native v√† Flutter kh√°c nhau nh∆∞ th·∫ø n√†o?",
      answers: {
        A: "React Native d√πng JavaScript, Flutter d√πng Dart",
        B: "C·∫£ hai ƒë·ªÅu d√πng JavaScript",
        C: "React Native d√πng Dart, Flutter d√πng JavaScript",
        D: "C·∫£ hai ƒë·ªÅu d√πng TypeScript"
      },
      correctAnswer: "A",
      fields: ["Mobile Development"],
      topics: ["React Native", "Flutter"],
      levels: ["junior", "middle"],
      explanation: "React Native s·ª≠ d·ª•ng JavaScript/TypeScript v√† bridge ƒë·ªÉ giao ti·∫øp v·ªõi native code, Flutter s·ª≠ d·ª•ng Dart v√† c√≥ engine ri√™ng."
    }
  ]

  // DevOps Questions
  const devopsQuestions = [
    {
      question: "Docker container v√† virtual machine kh√°c nhau nh∆∞ th·∫ø n√†o?",
      answers: {
        A: "Container chia s·∫ª OS kernel, VM c√≥ OS ri√™ng",
        B: "Container c√≥ OS ri√™ng, VM chia s·∫ª kernel",
        C: "C·∫£ hai ƒë·ªÅu c√≥ OS ri√™ng",
        D: "C·∫£ hai ƒë·ªÅu chia s·∫ª kernel"
      },
      correctAnswer: "A",
      fields: ["DevOps & Cloud"],
      topics: ["Docker", "Virtualization"],
      levels: ["middle", "senior"],
      explanation: "Container chia s·∫ª OS kernel v·ªõi host, nh·∫π h∆°n v√† start nhanh h∆°n. VM c√≥ OS ri√™ng, n·∫∑ng h∆°n nh∆∞ng c√¥ l·∫≠p ho√†n to√†n."
    },
    {
      question: "CI/CD pipeline c√≥ t√°c d·ª•ng g√¨?",
      answers: {
        A: "T·ª± ƒë·ªông h√≥a build, test v√† deploy",
        B: "Ch·ªâ t·ª± ƒë·ªông test",
        C: "Ch·ªâ t·ª± ƒë·ªông deploy",
        D: "Ch·ªâ t·ª± ƒë·ªông build"
      },
      correctAnswer: "A",
      fields: ["DevOps & Cloud"],
      topics: ["CI/CD", "Automation"],
      levels: ["middle", "senior"],
      explanation: "CI/CD (Continuous Integration/Continuous Deployment) t·ª± ƒë·ªông h√≥a to√†n b·ªô quy tr√¨nh t·ª´ build, test ƒë·∫øn deploy, gi·∫£m l·ªói v√† tƒÉng t·ªëc ƒë·ªô release."
    }
  ]

  // Data Questions
  const dataQuestions = [
    {
      question: "SQL v√† NoSQL kh√°c nhau nh∆∞ th·∫ø n√†o?",
      answers: {
        A: "SQL c√≥ schema c·ªë ƒë·ªãnh, NoSQL linh ho·∫°t schema",
        B: "SQL linh ho·∫°t schema, NoSQL c√≥ schema c·ªë ƒë·ªãnh",
        C: "C·∫£ hai ƒë·ªÅu c√≥ schema c·ªë ƒë·ªãnh",
        D: "C·∫£ hai ƒë·ªÅu linh ho·∫°t schema"
      },
      correctAnswer: "A",
      fields: ["Data & AI"],
      topics: ["Database", "SQL", "NoSQL"],
      levels: ["middle", "senior"],
      explanation: "SQL databases c√≥ schema c·ªë ƒë·ªãnh v√† quan h·ªá, NoSQL databases c√≥ schema linh ho·∫°t v√† th∆∞·ªùng kh√¥ng quan h·ªá."
    }
  ]

  // Combine all questions
  const allQuestions = [
    ...frontendQuestions,
    ...backendQuestions,
    ...fullstackQuestions,
    ...mobileQuestions,
    ...devopsQuestions,
    ...dataQuestions
  ]

  // Create questions
  for (const questionData of allQuestions) {
    await prisma.question.create({
      data: {
        question: questionData.question,
        answers: toAnswerArray(questionData),
        fields: questionData.fields,
        topics: questionData.topics,
        levels: questionData.levels,
        explanation: questionData.explanation
      }
    })
  }

  console.log('‚úÖ Questions seeded successfully!')
  console.log(`üìù Created ${allQuestions.length} questions`)

  await prisma.$disconnect()
}

main().catch(console.error)
